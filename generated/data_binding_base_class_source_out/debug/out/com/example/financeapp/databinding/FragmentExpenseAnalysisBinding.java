// Generated by view binder compiler. Do not edit!
package com.example.financeapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.financeapp.R;
import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.charts.PieChart;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentExpenseAnalysisBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ChipGroup chipGroup;

  @NonNull
  public final Chip chipMonth;

  @NonNull
  public final Chip chipWeek;

  @NonNull
  public final Chip chipYear;

  @NonNull
  public final LineChart lineChart;

  @NonNull
  public final PieChart pieChart;

  private FragmentExpenseAnalysisBinding(@NonNull ConstraintLayout rootView,
      @NonNull ChipGroup chipGroup, @NonNull Chip chipMonth, @NonNull Chip chipWeek,
      @NonNull Chip chipYear, @NonNull LineChart lineChart, @NonNull PieChart pieChart) {
    this.rootView = rootView;
    this.chipGroup = chipGroup;
    this.chipMonth = chipMonth;
    this.chipWeek = chipWeek;
    this.chipYear = chipYear;
    this.lineChart = lineChart;
    this.pieChart = pieChart;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentExpenseAnalysisBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentExpenseAnalysisBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_expense_analysis, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentExpenseAnalysisBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chipGroup;
      ChipGroup chipGroup = ViewBindings.findChildViewById(rootView, id);
      if (chipGroup == null) {
        break missingId;
      }

      id = R.id.chipMonth;
      Chip chipMonth = ViewBindings.findChildViewById(rootView, id);
      if (chipMonth == null) {
        break missingId;
      }

      id = R.id.chipWeek;
      Chip chipWeek = ViewBindings.findChildViewById(rootView, id);
      if (chipWeek == null) {
        break missingId;
      }

      id = R.id.chipYear;
      Chip chipYear = ViewBindings.findChildViewById(rootView, id);
      if (chipYear == null) {
        break missingId;
      }

      id = R.id.lineChart;
      LineChart lineChart = ViewBindings.findChildViewById(rootView, id);
      if (lineChart == null) {
        break missingId;
      }

      id = R.id.pieChart;
      PieChart pieChart = ViewBindings.findChildViewById(rootView, id);
      if (pieChart == null) {
        break missingId;
      }

      return new FragmentExpenseAnalysisBinding((ConstraintLayout) rootView, chipGroup, chipMonth,
          chipWeek, chipYear, lineChart, pieChart);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
